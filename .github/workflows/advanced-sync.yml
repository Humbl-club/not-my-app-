name: Advanced Auto Sync

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Auto-sync every hour
    - cron: '0 * * * *'

env:
  NODE_VERSION: '18'

jobs:
  # Quality checks
  quality-check:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint check
      run: npm run lint --if-present
      continue-on-error: true
      
    - name: Type check
      run: npm run type-check --if-present
      continue-on-error: true
      
    - name: Build check
      run: npm run build
      
    - name: Test
      run: npm test --if-present
      
    - name: Check deployment readiness
      id: check
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # Auto-sync main branch changes
  auto-sync-main:
    needs: quality-check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.quality-check.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
    - name: Create/update staging branch
      run: |
        if git ls-remote --heads origin staging | grep -q staging; then
          git checkout staging
          git merge main --no-ff -m "Auto-sync: Merge main to staging"
        else
          git checkout -b staging
        fi
        git push origin staging
        
    - name: Create/update production branch  
      if: success()
      run: |
        if git ls-remote --heads origin production | grep -q production; then
          git checkout production
          git merge staging --no-ff -m "Auto-sync: Promote staging to production"
        else
          git checkout -b production
        fi
        git push origin production
        
    - name: Create release tag
      run: |
        VERSION=$(date +'v%Y.%m.%d-%H%M%S')
        git tag -a "$VERSION" -m "Auto-release: $VERSION"
        git push origin "$VERSION"
        
    - name: Sync summary
      run: |
        echo "üéâ Auto-sync completed:"
        echo "  üì¶ Main ‚Üí Staging ‚Üí Production"
        echo "  üè∑Ô∏è  Tagged: $(git describe --tags --abbrev=0)"
        echo "  üìÖ Time: $(date)"

  # Auto-merge approved PRs
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    
    steps:
    - name: Check if PR is approved
      uses: actions/github-script@v7
      with:
        script: |
          const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          });
          
          const approvedReviews = reviews.filter(review => review.state === 'APPROVED');
          
          if (approvedReviews.length > 0) {
            console.log('PR has approvals, enabling auto-merge...');
            
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: 'squash'
            });
            
            console.log('‚úÖ PR auto-merged successfully');
          } else {
            console.log('‚ÑπÔ∏è PR needs approval before auto-merge');
          }

  # Cleanup old branches and tags
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup old feature branches
      run: |
        # Delete merged feature branches older than 30 days
        git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/feature/ | \
        while read branch date; do
          if [[ $(date -d "$date" +%s) -lt $(date -d "30 days ago" +%s) ]]; then
            echo "Deleting old branch: $branch"
            git push origin --delete ${branch#origin/} || true
          fi
        done
        
    - name: Cleanup old tags
      run: |
        # Keep only last 50 auto-release tags
        git tag -l "v*" | sort -V | head -n -50 | xargs -r git push origin --delete || true
